/* automatically generated by rust-bindgen 0.72.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct local_result {
    pub buf: *mut ::std::os::raw::c_char,
    pub len: usize,
    pub _vec: *mut ::std::os::raw::c_void,
    pub elapsed: f64,
    pub rows_read: u64,
    pub bytes_read: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of local_result"][::std::mem::size_of::<local_result>() - 48usize];
    ["Alignment of local_result"][::std::mem::align_of::<local_result>() - 8usize];
    ["Offset of field: local_result::buf"][::std::mem::offset_of!(local_result, buf) - 0usize];
    ["Offset of field: local_result::len"][::std::mem::offset_of!(local_result, len) - 8usize];
    ["Offset of field: local_result::_vec"][::std::mem::offset_of!(local_result, _vec) - 16usize];
    ["Offset of field: local_result::elapsed"]
        [::std::mem::offset_of!(local_result, elapsed) - 24usize];
    ["Offset of field: local_result::rows_read"]
        [::std::mem::offset_of!(local_result, rows_read) - 32usize];
    ["Offset of field: local_result::bytes_read"]
        [::std::mem::offset_of!(local_result, bytes_read) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct local_result_v2 {
    pub buf: *mut ::std::os::raw::c_char,
    pub len: usize,
    pub _vec: *mut ::std::os::raw::c_void,
    pub elapsed: f64,
    pub rows_read: u64,
    pub bytes_read: u64,
    pub error_message: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of local_result_v2"][::std::mem::size_of::<local_result_v2>() - 56usize];
    ["Alignment of local_result_v2"][::std::mem::align_of::<local_result_v2>() - 8usize];
    ["Offset of field: local_result_v2::buf"]
        [::std::mem::offset_of!(local_result_v2, buf) - 0usize];
    ["Offset of field: local_result_v2::len"]
        [::std::mem::offset_of!(local_result_v2, len) - 8usize];
    ["Offset of field: local_result_v2::_vec"]
        [::std::mem::offset_of!(local_result_v2, _vec) - 16usize];
    ["Offset of field: local_result_v2::elapsed"]
        [::std::mem::offset_of!(local_result_v2, elapsed) - 24usize];
    ["Offset of field: local_result_v2::rows_read"]
        [::std::mem::offset_of!(local_result_v2, rows_read) - 32usize];
    ["Offset of field: local_result_v2::bytes_read"]
        [::std::mem::offset_of!(local_result_v2, bytes_read) - 40usize];
    ["Offset of field: local_result_v2::error_message"]
        [::std::mem::offset_of!(local_result_v2, error_message) - 48usize];
};
#[doc = " Connection structure for chDB\n Contains server instance, connection state, and query processing queue"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chdb_conn {
    pub server: *mut ::std::os::raw::c_void,
    pub connected: bool,
    pub queue: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chdb_conn"][::std::mem::size_of::<chdb_conn>() - 24usize];
    ["Alignment of chdb_conn"][::std::mem::align_of::<chdb_conn>() - 8usize];
    ["Offset of field: chdb_conn::server"][::std::mem::offset_of!(chdb_conn, server) - 0usize];
    ["Offset of field: chdb_conn::connected"]
        [::std::mem::offset_of!(chdb_conn, connected) - 8usize];
    ["Offset of field: chdb_conn::queue"][::std::mem::offset_of!(chdb_conn, queue) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chdb_streaming_result {
    pub internal_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chdb_streaming_result"][::std::mem::size_of::<chdb_streaming_result>() - 8usize];
    ["Alignment of chdb_streaming_result"]
        [::std::mem::align_of::<chdb_streaming_result>() - 8usize];
    ["Offset of field: chdb_streaming_result::internal_data"]
        [::std::mem::offset_of!(chdb_streaming_result, internal_data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chdb_result_ {
    pub internal_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chdb_result_"][::std::mem::size_of::<chdb_result_>() - 8usize];
    ["Alignment of chdb_result_"][::std::mem::align_of::<chdb_result_>() - 8usize];
    ["Offset of field: chdb_result_::internal_data"]
        [::std::mem::offset_of!(chdb_result_, internal_data) - 0usize];
};
pub type chdb_result = chdb_result_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chdb_connection_ {
    pub internal_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chdb_connection_"][::std::mem::size_of::<chdb_connection_>() - 8usize];
    ["Alignment of chdb_connection_"][::std::mem::align_of::<chdb_connection_>() - 8usize];
    ["Offset of field: chdb_connection_::internal_data"]
        [::std::mem::offset_of!(chdb_connection_, internal_data) - 0usize];
};
pub type chdb_connection = *mut chdb_connection_;
unsafe extern "C" {
    pub fn query_stable(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut local_result;
}
unsafe extern "C" {
    pub fn free_result(result: *mut local_result);
}
unsafe extern "C" {
    pub fn query_stable_v2(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut local_result_v2;
}
unsafe extern "C" {
    pub fn free_result_v2(result: *mut local_result_v2);
}
unsafe extern "C" {
    #[doc = " Creates a new chDB connection.\n Only one active connection is allowed per process.\n Creating a new connection with different path requires closing existing connection.\n\n @param argc Number of command-line arguments\n @param argv Command-line arguments array (--path=<db_path> to specify database location)\n @return Pointer to connection pointer, or NULL on failure\n @note Default path is \":memory:\" if not specified"]
    pub fn connect_chdb(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut chdb_conn;
}
unsafe extern "C" {
    #[doc = " Closes an existing chDB connection and cleans up resources.\n Thread-safe function that handles connection shutdown and cleanup.\n\n @param conn Pointer to connection pointer to close"]
    pub fn close_conn(conn: *mut *mut chdb_conn);
}
unsafe extern "C" {
    #[doc = " Executes a query on the given connection.\n Thread-safe function that handles query execution in a separate thread.\n\n @param conn Connection to execute query on\n @param query SQL query string to execute\n @param format Output format string (e.g., \"CSV\", default format)\n @return Query result structure containing output or error message\n @note Returns error result if connection is invalid or closed"]
    pub fn query_conn(
        conn: *mut chdb_conn,
        query: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> *mut local_result_v2;
}
unsafe extern "C" {
    #[doc = " Executes a query on the given connection with explicit length parameters.\n @brief Thread-safe query execution with binary-safe string handling\n @param conn Connection to execute query on\n @param query SQL query string to execute (may contain null bytes)\n @param query_len Length of query string in bytes\n @param format Output format string (e.g., \"CSV\", default format)\n @param format_len Length of format string in bytes\n @return Query result structure containing output or error message\n @note Returns error result if connection is invalid or closed\n @note This function is binary-safe and can handle queries containing null bytes"]
    pub fn query_conn_n(
        conn: *mut chdb_conn,
        query: *const ::std::os::raw::c_char,
        query_len: usize,
        format: *const ::std::os::raw::c_char,
        format_len: usize,
    ) -> *mut local_result_v2;
}
unsafe extern "C" {
    #[doc = " Executes a streaming query on the given connection.\n @brief Initializes streaming query execution and returns result handle\n @param conn Connection to execute query on\n @param query SQL query string to execute\n @param format Output format string (e.g. \"CSV\", default format)\n @return Streaming result handle containing query state or error message\n @note Returns error result if connection is invalid or closed"]
    pub fn query_conn_streaming(
        conn: *mut chdb_conn,
        query: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> *mut chdb_streaming_result;
}
unsafe extern "C" {
    #[doc = " Executes a streaming query on the given connection with explicit length parameters.\n @brief Initializes streaming query execution with binary-safe string handling\n @param conn Connection to execute query on\n @param query SQL query string to execute (may contain null bytes)\n @param query_len Length of query string in bytes\n @param format Output format string (e.g., \"CSV\", default format)\n @param format_len Length of format string in bytes\n @return Streaming result handle containing query state or error message\n @note Returns error result if connection is invalid or closed\n @note This function is binary-safe and can handle queries containing null bytes\n @note Use chdb_streaming_fetch_result() to retrieve data chunks from the streaming query"]
    pub fn query_conn_streaming_n(
        conn: *mut chdb_conn,
        query: *const ::std::os::raw::c_char,
        query_len: usize,
        format: *const ::std::os::raw::c_char,
        format_len: usize,
    ) -> *mut chdb_streaming_result;
}
unsafe extern "C" {
    #[doc = " Retrieves error message from streaming result.\n @brief Gets error message associated with streaming query execution\n @param result Streaming result handle from query_conn_streaming()\n @return Null-terminated error message string, or NULL if no error occurred"]
    pub fn chdb_streaming_result_error(
        result: *mut chdb_streaming_result,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Fetches next chunk of streaming results.\n @brief Iterates through streaming query results\n @param conn Active connection handle\n @param result Streaming result handle from query_conn_streaming()\n @return Materialized result chunk with data\n @note Returns empty result when stream ends"]
    pub fn chdb_streaming_fetch_result(
        conn: *mut chdb_conn,
        result: *mut chdb_streaming_result,
    ) -> *mut local_result_v2;
}
unsafe extern "C" {
    #[doc = " Cancels ongoing streaming query.\n @brief Aborts streaming query execution and cleans up resources\n @param conn Active connection handle\n @param result Streaming result handle to cancel"]
    pub fn chdb_streaming_cancel_query(conn: *mut chdb_conn, result: *mut chdb_streaming_result);
}
unsafe extern "C" {
    #[doc = " Releases resources associated with streaming result.\n @brief Destroys streaming result handle and frees allocated memory\n @param result Streaming result handle to destroy\n @warning Must be called even if query was finished or canceled"]
    pub fn chdb_destroy_result(result: *mut chdb_streaming_result);
}
unsafe extern "C" {
    #[doc = " Creates a new chDB connection.\n Only one active connection is allowed per process.\n Creating a new connection with different path requires closing existing connection.\n\n @param argc Number of command-line arguments\n @param argv Command-line arguments array (--path=<db_path> to specify database location)\n @return Pointer to connection pointer, or NULL on failure\n @note Default path is \":memory:\" if not specified"]
    pub fn chdb_connect(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut chdb_connection;
}
unsafe extern "C" {
    #[doc = " Closes an existing chDB connection and cleans up resources.\n Thread-safe function that handles connection shutdown and cleanup.\n\n @param conn Pointer to connection pointer to close"]
    pub fn chdb_close_conn(conn: *mut chdb_connection);
}
unsafe extern "C" {
    #[doc = " Executes a query on the given connection.\n Thread-safe function that handles query execution in a separate thread.\n\n @param conn Connection to execute query on\n @param query SQL query string to execute\n @param format Output format string (e.g., \"CSV\", default format)\n @return Query result structure containing output or error message\n @note Returns error result if connection is invalid or closed"]
    pub fn chdb_query(
        conn: chdb_connection,
        query: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> *mut chdb_result;
}
unsafe extern "C" {
    #[doc = " Executes a query on the given connection with explicit length parameters.\n @brief Thread-safe query execution with binary-safe string handling\n @param conn Connection to execute query on\n @param query SQL query string to execute (may contain null bytes)\n @param query_len Length of query string in bytes\n @param format Output format string (e.g., \"CSV\", default format)\n @param format_len Length of format string in bytes\n @return Query result structure containing output or error message\n @note Returns error result if connection is invalid or closed\n @note This function is binary-safe and can handle queries containing null bytes\n @note Use chdb_result_* functions to access result data and metadata"]
    pub fn chdb_query_n(
        conn: chdb_connection,
        query: *const ::std::os::raw::c_char,
        query_len: usize,
        format: *const ::std::os::raw::c_char,
        format_len: usize,
    ) -> *mut chdb_result;
}
unsafe extern "C" {
    #[doc = " @brief Execute a query with command-line interface\n @param argc Argument count (same as main()'s argc)\n @param argv Argument vector (same as main()'s argv)\n @return Query result structure containing output or error message"]
    pub fn chdb_query_cmdline(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut chdb_result;
}
unsafe extern "C" {
    #[doc = " Executes a streaming query on the given connection.\n @brief Initializes streaming query execution and returns result handle\n @param conn Connection to execute query on\n @param query SQL query string to execute\n @param format Output format string (e.g. \"CSV\", default format)\n @return Streaming result handle containing query state or error message\n @note Returns error result if connection is invalid or closed"]
    pub fn chdb_stream_query(
        conn: chdb_connection,
        query: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> *mut chdb_result;
}
unsafe extern "C" {
    #[doc = " Executes a streaming query with explicit string lengths (binary-safe).\n @brief Initializes streaming query execution with specified buffer lengths\n @param conn Connection to execute query on\n @param query SQL query buffer (may contain null bytes)\n @param query_len Length of query buffer in bytes\n @param format Output format buffer (may contain null bytes)\n @param format_len Length of format buffer in bytes\n @return Streaming result handle containing query state or error message\n @note Strings do not need to be null-terminated\n @note Use this function when dealing with queries/formats containing null bytes"]
    pub fn chdb_stream_query_n(
        conn: chdb_connection,
        query: *const ::std::os::raw::c_char,
        query_len: usize,
        format: *const ::std::os::raw::c_char,
        format_len: usize,
    ) -> *mut chdb_result;
}
unsafe extern "C" {
    #[doc = " Fetches next chunk of streaming results.\n @brief Iterates through streaming query results\n @param conn Active connection handle\n @param result Streaming result handle from query_conn_streaming()\n @return Materialized result chunk with data\n @note Returns empty result when stream ends"]
    pub fn chdb_stream_fetch_result(
        conn: chdb_connection,
        result: *mut chdb_result,
    ) -> *mut chdb_result;
}
unsafe extern "C" {
    #[doc = " Cancels ongoing streaming query.\n @brief Aborts streaming query execution and cleans up resources\n @param conn Active connection handle\n @param result Streaming result handle to cancel"]
    pub fn chdb_stream_cancel_query(conn: chdb_connection, result: *mut chdb_result);
}
unsafe extern "C" {
    #[doc = " Destroys a query result and releases all associated resources\n @param result The result handle to destroy"]
    pub fn chdb_destroy_query_result(result: *mut chdb_result);
}
unsafe extern "C" {
    #[doc = " Gets pointer to the result data buffer\n @param result The query result handle\n @return Read-only pointer to the result data"]
    pub fn chdb_result_buffer(result: *mut chdb_result) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Gets the length of the result data\n @param result The query result handle\n @return Size of result data in bytes"]
    pub fn chdb_result_length(result: *mut chdb_result) -> usize;
}
unsafe extern "C" {
    #[doc = " Gets query execution time\n @param result The query result handle\n @return Elapsed time in seconds"]
    pub fn chdb_result_elapsed(result: *mut chdb_result) -> f64;
}
unsafe extern "C" {
    #[doc = " Gets total rows in query result\n @param result The query result handle\n @return Number of rows contained in the result set"]
    pub fn chdb_result_rows_read(result: *mut chdb_result) -> u64;
}
unsafe extern "C" {
    #[doc = " Gets the total bytes occupied by the result set in internal binary format\n @param result The query result handle\n @return Number of bytes occupied by the result set in internal binary representation"]
    pub fn chdb_result_bytes_read(result: *mut chdb_result) -> u64;
}
unsafe extern "C" {
    #[doc = " Gets rows read from storage engine\n @param result The query result handle\n @return Number of rows read from storage"]
    pub fn chdb_result_storage_rows_read(result: *mut chdb_result) -> u64;
}
unsafe extern "C" {
    #[doc = " Gets bytes read from storage engine\n @param result The query result handle\n @return Number of bytes read from storage engine"]
    pub fn chdb_result_storage_bytes_read(result: *mut chdb_result) -> u64;
}
unsafe extern "C" {
    #[doc = " Retrieves error message from query execution\n @param result The query result handle\n @return Null-terminated error description, NULL if no error"]
    pub fn chdb_result_error(result: *mut chdb_result) -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
